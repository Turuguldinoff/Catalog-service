/*
 * This file is generated by jOOQ.
 */
package com.sample.model.tables;


import com.sample.model.Indexes;
import com.sample.model.Keys;
import com.sample.model.Public;
import com.sample.model.tables.records.ProductOfferingRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.7"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ProductOffering extends TableImpl<ProductOfferingRecord> {

    private static final long serialVersionUID = -2085752572;

    /**
     * The reference instance of <code>public.product_offering</code>
     */
    public static final ProductOffering PRODUCT_OFFERING = new ProductOffering();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProductOfferingRecord> getRecordType() {
        return ProductOfferingRecord.class;
    }

    /**
     * The column <code>public.product_offering.id</code>.
     */
    public final TableField<ProductOfferingRecord, String> ID = createField("id", org.jooq.impl.SQLDataType.VARCHAR(80).nullable(false), this, "");

    /**
     * @deprecated Unknown data type. Please define an explicit {@link org.jooq.Binding} to specify how this type should be handled. Deprecation can be turned off using {@literal <deprecationOnUnknownTypes/>} in your code generator configuration.
     */
    @java.lang.Deprecated
    public final TableField<ProductOfferingRecord, Object> BODY = createField("body", org.jooq.impl.DefaultDataType.getDefaultDataType("\"pg_catalog\".\"jsonb\""), this, "");

    /**
     * The column <code>public.product_offering.last_update</code>.
     */
    public final TableField<ProductOfferingRecord, Timestamp> LAST_UPDATE = createField("last_update", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * Create a <code>public.product_offering</code> table reference
     */
    public ProductOffering() {
        this(DSL.name("product_offering"), null);
    }

    /**
     * Create an aliased <code>public.product_offering</code> table reference
     */
    public ProductOffering(String alias) {
        this(DSL.name(alias), PRODUCT_OFFERING);
    }

    /**
     * Create an aliased <code>public.product_offering</code> table reference
     */
    public ProductOffering(Name alias) {
        this(alias, PRODUCT_OFFERING);
    }

    private ProductOffering(Name alias, Table<ProductOfferingRecord> aliased) {
        this(alias, aliased, null);
    }

    private ProductOffering(Name alias, Table<ProductOfferingRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> ProductOffering(Table<O> child, ForeignKey<O, ProductOfferingRecord> key) {
        super(child, key, PRODUCT_OFFERING);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PRODUCT_OFFERING_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<ProductOfferingRecord> getPrimaryKey() {
        return Keys.PRODUCT_OFFERING_PKEY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<ProductOfferingRecord>> getKeys() {
        return Arrays.<UniqueKey<ProductOfferingRecord>>asList(Keys.PRODUCT_OFFERING_PKEY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProductOffering as(String alias) {
        return new ProductOffering(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ProductOffering as(Name alias) {
        return new ProductOffering(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ProductOffering rename(String name) {
        return new ProductOffering(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ProductOffering rename(Name name) {
        return new ProductOffering(name, null);
    }
}
